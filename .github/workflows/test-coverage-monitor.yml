name: 測試覆蓋率監控

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天 UTC 2:00 執行 (台灣時間 10:00)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      threshold_check:
        description: '是否執行閾值檢查'
        required: false
        default: true
        type: boolean

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 設置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安裝依賴
      run: npm ci
      
    - name: 創建必要的目錄
      run: |
        mkdir -p test-results
        mkdir -p coverage
        
    - name: 執行測試覆蓋率監控
      run: npm run test:coverage:monitor
      env:
        CI: true
        THRESHOLD_CHECK: ${{ github.event.inputs.threshold_check || 'true' }}
        
    - name: 上傳覆蓋率報告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ github.run_number }}
        path: |
          coverage/
          TEST_COVERAGE_REPORT.md
          test-results/coverage-history.json
        retention-days: 30
        
    - name: 上傳覆蓋率到 Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 評論 PR 覆蓋率報告
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './TEST_COVERAGE_REPORT.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            // 查找是否已有覆蓋率評論
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('## 📊 測試覆蓋率報告')
            );
            
            const commentBody = \`## 📊 測試覆蓋率報告
            
          \${report}
          
          ---
          *此報告由 GitHub Actions 自動生成 - Run #${{ github.run_number }}*\`;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
          }
          
    - name: 檢查覆蓋率閾值
      if: github.event.inputs.threshold_check != 'false'
      run: |
        if [ $? -ne 0 ]; then
          echo "❌ 測試覆蓋率未達到要求的閾值"
          exit 1
        else
          echo "✅ 測試覆蓋率達到要求"
        fi
        
    - name: 提交覆蓋率歷史記錄
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -f "test-results/coverage-history.json" ]; then
          git add test-results/coverage-history.json
          git add TEST_COVERAGE_REPORT.md
          
          if ! git diff --staged --quiet; then
            git commit -m "chore: 更新測試覆蓋率歷史記錄 [skip ci]"
            git push
          else
            echo "沒有覆蓋率變更需要提交"
          fi
        fi
        
  coverage-trend-analysis:
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4
      
    - name: 下載覆蓋率歷史
      uses: actions/download-artifact@v4
      with:
        name: coverage-report-${{ github.run_number }}
        path: ./
        
    - name: 設置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安裝依賴
      run: npm ci
      
    - name: 生成趨勢分析報告
      run: |
        node -e "
        const { analyzeCoverageTrend } = require('./scripts/test-coverage-monitor.js');
        const fs = require('fs');
        
        if (fs.existsSync('test-results/coverage-history.json')) {
          const history = JSON.parse(fs.readFileSync('test-results/coverage-history.json', 'utf8'));
          const trends = analyzeCoverageTrend(history);
          
          console.log('📈 覆蓋率趨勢分析:');
          console.log(JSON.stringify(trends, null, 2));
          
          // 生成週報或月報
          const report = {
            date: new Date().toISOString(),
            trends,
            history: history.slice(-7) // 最近7次記錄
          };
          
          fs.writeFileSync('coverage-trend-report.json', JSON.stringify(report, null, 2));
        }
        "
        
    - name: 上傳趨勢報告
      uses: actions/upload-artifact@v4
      with:
        name: coverage-trend-report-${{ github.run_number }}
        path: coverage-trend-report.json
        retention-days: 90 